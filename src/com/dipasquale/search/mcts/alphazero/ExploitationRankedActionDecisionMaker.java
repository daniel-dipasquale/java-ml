package com.dipasquale.search.mcts.alphazero;

import com.dipasquale.common.OptimalPairSelector;
import com.dipasquale.search.mcts.Action;
import com.dipasquale.search.mcts.SearchNode;
import com.dipasquale.search.mcts.State;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;

import java.util.Comparator;
import java.util.List;

@RequiredArgsConstructor(access = AccessLevel.PRIVATE)
final class ExploitationRankedActionDecisionMaker<TAction extends Action, TState extends State<TAction, TState>, TSearchNode extends SearchNode<TAction, AlphaZeroEdge, TState, TSearchNode>> implements RankedActionDecisionMaker<TAction, TState, TSearchNode> {
    private static final Comparator<Float> FLOAT_ASCENDING_COMPARATOR = Float::compare;
    private static final ExploitationRankedActionDecisionMaker<?, ?, ?> INSTANCE = new ExploitationRankedActionDecisionMaker<>();

    public static <TAction extends Action, TState extends State<TAction, TState>, TSearchNode extends SearchNode<TAction, AlphaZeroEdge, TState, TSearchNode>> ExploitationRankedActionDecisionMaker<TAction, TState, TSearchNode> getInstance() {
        return (ExploitationRankedActionDecisionMaker<TAction, TState, TSearchNode>) INSTANCE;
    }

    @Override
    public TSearchNode decide(final int simulations, final int depth, final List<RankedAction<TAction, TState, TSearchNode>> rankedActions) {
        OptimalPairSelector<Float, TSearchNode> optimalSearchNodeSelector = new OptimalPairSelector<>(FLOAT_ASCENDING_COMPARATOR);

        for (RankedAction<TAction, TState, TSearchNode> rankedAction : rankedActions) {
            optimalSearchNodeSelector.replaceValueIfBetter(rankedAction.getEfficiency(), rankedAction.getSearchNode());
        }

        return optimalSearchNodeSelector.getValue();
    }
}
